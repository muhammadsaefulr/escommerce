name: CI/CD Pipeline Auto Deploy

on:
  push:
    branches:
      - main 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout repository
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Setup Go environment
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.4
    
    # 3. Setup Docker Compose
    - name: Setup Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    # 3. Set up Go Modules
    - name: Set up Go Modules
      run: |
        go env -w GOPROXY=direct
        go env -w GOSUMDB=off

    # 4. Download dependencies
    - name: Download dependencies
      run: |
        go mod tidy
        go mod download

    # 5. Build the Go application
    - name: Build Go app
      run: |
        if ! go build -o app main.go; then
          echo "Build Failed \n Github Action JobId: $GITHUB_JOB \n At Github Repository: $GITHUB_REPOSITORY"
          exit 1
        else
          echo "Go application built successfully \n Github Action JobId: $GITHUB_JOB \n At Github Repository: $GITHUB_REPOSITORY"
        fi

    # 6. Build Docker images using Docker Compose
    - name: Build Docker images with Compose
      run: |
        if ! docker-compose build; then
          echo "Docker Compose build failed \n Github Action JobId: $GITHUB_JOB \n At Github Repository: $GITHUB_REPOSITORY"
          exit 1
        else
          echo "Docker images built successfully \n Github Action JobId: $GITHUB_JOB \n At Github Repository: $GITHUB_REPOSITORY"
        fi

    # 7. Deploy to VPS using ssh
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.7
      env:
        GITHUB_JOB_NAME = ${{ github.job }}
        GITHUB_REPO = ${{ github.repository }}
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASS }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Stop and remove existing containers (if any)
          docker-compose down || true

          # Updating repository information
          
          TARGET_DIR=~/escommerce
          REPO_URL=https://github.com/muhammadsaefulr/escommerce.git

          # Check if the target directory exists
          if [ -d "$TARGET_DIR" ]; then
              echo "Directory $TARGET_DIR exists. Pulling latest changes..."
              cd "$TARGET_DIR" || exit
              git pull origin main
          else
              echo "Directory $TARGET_DIR not found. Cloning the repository..."
              git clone "$REPO_URL" "$TARGET_DIR"
          fi

          # Start the application using Docker Compose
          cd ~/escommerce
          if ! docker-compose up -d; then
            curl -X POST https://wagate.msaepul.my.id/message/send-buildinfo \
                -H "Content-Type: application/json" \
                -d '{"session":"mysess","to":"6288219406742","text":"Docker Compose build failed \n Github Action JobId: ${{ github.run_id }} \n At Github Repository: ${{ github.repository }}) "}'
            exit 1
          else
            curl -X POST https://wagate.msaepul.my.id/message/send-buildinfo \
                -H "Content-Type: application/json" \
                -d '{"session":"mysess","to":"6288219406742","text":"Docker Compose build Successfully \n Github Action JobId: $GITHUB_JOB \n At Github Repository: $GITHUB_REPOSITORY"}'
          fi

